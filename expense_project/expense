#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expense')
  end

  def list_expenses()
    result = @connection.exec('SELECT * FROM expenses ORDER BY created_on ASC')
    display_table(result)
  end

  def add_expense(amount, memo)
    sql = 'INSERT INTO expenses (amount, memo) VALUES ($1, $2)'
    @connection.exec_params(sql, [amount, memo])
  end

  def search(search_term)
    sql = 'SELECT * FROM expenses WHERE memo ~* $1'
    result = @connection.exec_params(sql, [search_term])
    display_table(result)
  end

  def select_by_id(id)
    sql = 'SELECT * FROM expenses WHERE id = $1'
    @connection.exec_params(sql, [id])
  end

  def delete(id)
    sql = 'DELETE from expenses WHERE id = $1'
    @connection.exec_params(sql, [id])
  end

  def clear_expenses
    sql = 'DELETE from expenses'
    @connection.exec(sql)
  end

  # private

  def display_row(row)
    columns = [row[0].rjust(3), row[3].rjust(26), row[1].rjust(8), row[2]]
    puts columns.join(' | ')
  end

  def display_table(table)
    row_count = table.ntuples
    if row_count == 0
      puts 'There are no expenses.'
      return
    end
    puts "There #{row_count > 1 ? 'are' : 'is'} #{row_count} expense#{'s' if row_count > 1}."
    display_row(table.fields)
    separator = ['-' * 3, '-' * 26, '-' * 8, '-' * 32]
    puts separator.join('-+-')
    table.values.each { |row| display_row(row) }
    display_total(table)
  end

  def display_total(table)
    total = table.column_values(1).map(&:to_f).sum
    separator = ['-' * 78]
    puts separator
    puts "Total #{format('%.2f', total).rjust(37)}"
  end
end

class CLI
  def initialize
    @expense_data = ExpenseData.new
  end

  def run(args = ARGV)
    # Parameter Handling: reads args from command line
    command = args.shift
    case command
    when 'list'
      @expense_data.list_expenses
    when 'add'
      amount, memo = args[0..1]
      unless (amount && memo && args.size == 2)
        abort 'You must provide an amount and memo.'
      end
      @expense_data.add_expense(amount, memo)
    when 'search'
      search_term = args[0]
      abort 'You must provide a search term.' unless search_term
      @expense_data.search(search_term)
    when 'delete'
      id = args[0]
      candidate = @expense_data.select_by_id(id)

      if candidate.ntuples == 1
        @expense_data.delete(id)
        puts 'The following expense has been deleted:'
        @expense_data.display_row(candidate.values.first)
      else
        puts "There is no expense with the id '#{id}'."
      end
    when 'clear'
      puts 'This will remove all expenses. Are you sure? (y/n)'
      response = $stdin.getch.downcase
      if response == 'y'
        @expense_data.clear_expenses
        puts 'All expenses have been deleted.'
      end
    else
      display_help
    end
  end

  def display_help()
    help_text = <<~HELP
    An expense recording system

    Commands:

    add AMOUNT MEMO - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP

    puts help_text
  end
end

CLI.new.run
